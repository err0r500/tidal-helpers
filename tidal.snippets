# Oscilators
snippet silence "Pattern a"
silence
endsnippet

snippet sine "Fractional => Pattern a"
sine 
endsnippet

snippet cosine "Fractional => Pattern a"
cosine 
endsnippet

snippet square "Fractional => Pattern a"
square 
endsnippet

snippet tri "Fractional => Pattern a"
tri 
endsnippet

snippet saw "Fractional => Pattern a"
saw 
endsnippet

snippet isaw "Fractional => Pattern a"
isaw  
endsnippet


####################
snippet choose "[a] -> Pattern a"
choose [${1:any}] 
endsnippet

snippet chooseBy "Pattern Double -> [a] -> Pattern a"
chooseBy "${1:doubles}" [${2:any}] 
endsnippet

snippet wchoose "[(a, Double)] -> Pattern a"
wchoose [(${1:any}, ${2:double})] 
endsnippet

snippet wChooseBy "Pattern Double -> [(a,Double)] -> Pattern a"
wChooseBy "${1:doubles}" [(${2:any}, ${3:double})] 
endsnippet


####################
# Random Functions
####################
snippet rand "Factorial => Pattern a"
rand  
endsnippet

snippet	irand "Num a => Int -> Pattern a"
irand 
endsnippet

snippet perlin "Pattern Double"
perlin
endsnippet

snippet perlinWith "Pattern Double -> Pattern Double"
perlinWith ${1:double}
endsnippet

snippet perlin2 "Pattern Double -> Pattern Double"
perlinWith ${1:double}
endsnippet

snippet perlin2With "Pattern Double -> Pattern Double -> Pattern Double"
perlinWith ${1:double} ${2:double}
endsnippet

####################
# Control Functions
####################
snippet accelerate "Pattern Double -> ControlPattern"
accelerate "${1:double}"
endsnippet

snippet attack "Pattern Double -> ControlPattern"
attack "${1:double}"
endsnippet

snippet bandf "Pattern Double -> ControlPattern"
bandf "${1:double}"
endsnippet

snippet bandq "Pattern Double -> ControlPattern"
bandq "${1:double}"
endsnippet

snippet begin "Pattern Double -> ControlPattern"
begin "${1:double}"
endsnippet

snippet bpf "Pattern Double -> ControlPattern"
bpf "${1:double}"
endsnippet

snippet bpq "Pattern Double -> ControlPattern"
bpq "${1:double}"
endsnippet

snippet coarse "Pattern Int -> ControlPattern"
coarse "${1:int}"
endsnippet

snippet crush "Pattern Double -> ControlPattern"
crush "${1:double}"
endsnippet

snippet cut "Pattern Int -> ControlPattern"
cut "${1:int}"
endsnippet

snippet cutoff "Pattern Double -> ControlPattern"
cutoff "${1:double}"
endsnippet

snippet delay "Pattern Double -> ControlPattern"
delay "${1:double}"
endsnippet

snippet delayfb "Pattern Double -> ControlPattern"
delayfb "${1:double}"
endsnippet

snippet delaytime "Pattern Double -> ControlPattern"
delaytime "${1:double}"
endsnippet

snippet end "Pattern Double -> ControlPattern"
end "${1:double}"
endsnippet

snippet gain "Pattern Double -> ControlPattern"
gain "${1:double}"
endsnippet

snippet hcutoff "Pattern Double -> ControlPattern"
hcutoff "${1:double}"
endsnippet

snippet hpf "Pattern Double -> ControlPattern"
hpf "${1:double}"
endsnippet

snippet hresonance "Pattern Double -> ControlPattern"
hresonance "${1:double}"
endsnippet

snippet hpq "Pattern Double -> ControlPattern"
hpq "${1:double}"
endsnippet

snippet leslie "Pattern Double -> ControlPattern"
leslie "${1:double}"
endsnippet

snippet loop "Pattern Double -> ControlPattern"
loop "${1:double}"
endsnippet

snippet lpf "Pattern Double -> ControlPattern"
lpf "${1:double}"
endsnippet

snippet n "Pattern Int -> ControlPattern"
n "${1:int}"
endsnippet

snippet nudge "Pattern Double -> ControlPattern"
nudge "${1:double}"
endsnippet

####################
snippet sound "Pattern String -> ControlPattern"
s "${1:samples}" 
endsnippet


snippet	bootstrap "bootstrap a 2-stack project"
do
  let masterGain = 1
  let s1G = 1
  let s2G = 1
  let s1 = silence 
         # gain s1G 
         # orbit 0
  let s2 = silence 
         # gain s2G 
         # orbit 1
  d1 $ stack [s1, s2] # masterGain
endsnippet


